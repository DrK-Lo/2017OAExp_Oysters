library("pegas")
library("poppr")
data(nancycats)
(nanhwe.full <- hw.test(nancycats, B = 1000))
for (i in 1:10){
print(i)
}
for (i in 1:10){
print(c(i, i*2))
}
(nanhwe.pop <- seppop(nancycats))
nanhwe.pop$P01
nanhwe.pop$P01@tab
(nanhwe.full <- hw.test(nancycats, B = 1000))
length(c(1,2,3))
length(c(5,2,3))
length(nanhwe.pop)
for (i in 1:length(nanhwe.pop)){
print(i)
print(hw.test(nanhwe.pop[[i]], B=0))
}
# What should our critical alpha be?
# 9 microsats
# 17 populations
0.05/(9*17)
knitr::opts_chunk$set(echo = TRUE)
packages_needed <- c("lme4", "multcomp", "devtools", "car", "MCMCglmm", "brms", "rstan", "emmeans", "tidybayes")
for (i in 1:length(packages_needed)){
if(!(packages_needed[i] %in% installed.packages())){install.packages(packages_needed[i])}
}
for (i in 1:length(packages_needed)){
library( packages_needed[i], character.only = TRUE)
}
mC <- readRDS("data/Final_mC_gene_5.RData")
uC <- readRDS("data/Final_umC_gene_5.RData")
meta_locus <- readRDS("data/Final_meta_gene_5.RData")
meta_samp <- readRDS("data/metadata_20190811.RData")
head(mC)
head(uC)
head(meta_locus)
head(meta_samp)
meta_samp$level <- paste(meta_samp$Treatment, meta_samp$Time, sep="_")
# remove excluded individual
meta_samp <- meta_samp[-which(meta_samp$ID==17099),]
# unit test - these should both be true
identical(names(mC), names(uC))
identical(names(uC), meta_samp$ID)
setwd("~/Documents/GitHub/2017OAExp_Oysters/markdown_files/DNAm/exploreBinomModels")
mC <- readRDS("data/Final_mC_gene_5.RData")
uC <- readRDS("data/Final_umC_gene_5.RData")
meta_locus <- readRDS("data/Final_meta_gene_5.RData")
meta_samp <- readRDS("data/metadata_20190811.RData")
head(mC)
head(uC)
head(meta_locus)
head(meta_samp)
meta_samp$level <- paste(meta_samp$Treatment, meta_samp$Time, sep="_")
# remove excluded individual
meta_samp <- meta_samp[-which(meta_samp$ID==17099),]
# unit test - these should both be true
identical(names(mC), names(uC))
identical(names(uC), meta_samp$ID)
# real data
a <- data.frame(mc=as.numeric(mC[1,]),
uc=as.numeric(uC[1,]),
level=meta_samp$level,
Treatment = meta_samp$Treatment,
Time = meta_samp$Time,
tankID = meta_samp$tankID,
Pop = meta_samp$Pop,
size = as.numeric(mC[1,])+as.numeric(uC[1,]))
a$level <- factor(a$level, levels=c("400_09", "400_80", "2800_09", "2800_80"))
levels(a$level)
# real data with all 0 for unmeth in one treatment
b <- a
b$uc[b$level=='400_09'] <- 0
b$size <- b$mc+b$uc
b
# real data with all 0 for meth in one treatment
c <- a
c$mc[c$level=='400_09'] <- 0
c[18,2] <-5 # so no 0's in both columns
c$size <- c$mc+c$uc
# real data with all one count for meth in one treatment
# compare to c for zero variance
d <- a
d$mc[d$level=='400_09'] <- 1
d$uc[d$level=='400_09'] <- 20
d$size <- d$mc+d$uc
d
boxplot(mc/(mc+uc) ~ Treatment*Time, data=a, las=2)
# No random effect of tank
m1 <- glm(cbind(mc,uc)~ Treatment*Time, data=a,family = "binomial")
summary(m1)
boxplot(m1$residuals~a$tankID)
boxplot(m1$residuals~a$Pop)
# definitely some tank effects in the residuals
vif(m1) # variance inflation factor
AIC(m1)
m1.0 <- glm(cbind(mc,uc)~ Treatment*Time, data=a,family = "quasibinomial")
summary(m1.0)
boxplot(m1.0$residuals~a$tankID)
boxplot(m1.0$residuals~a$Pop)
# definitely some tank effects in the residuals
vif(m1.0) # variance inflation factor
m1.1 <- glmer(cbind(mc,uc)~ Treatment*Time + (1|tankID), data=a,family = "binomial")
summary(m1.1)
boxplot(residuals(m1.1)~a$tankID)
boxplot(residuals(m1.1)~a$Pop)
# this seems to be better, but still not perfectly accounting for residuals across tanks
vif(m1.1) # the inflation in size of the confidence ellipse or ellipsoid for the coefficients of the term in comparison with what would be obtained for orthogonal data.
AIC(m1.1)
# improvement in model fit compared to m0
boxplot(mc/(mc+uc) ~ Treatment*Time, data=b, las=2)
# No random effect of tank
m1 <- glm(cbind(mc,uc)~ Treatment*Time, data=b,family = "binomial")
summary(m1)
boxplot(m1$residuals~b$tankID)
boxplot(m1$residuals~b$Pop)
# definitely some tank effects in the residuals
vif(m1) # variance inflation factor
# hmmm
m1.1 <- glmer(cbind(mc,uc)~ Treatment*Time + (1|tankID), data=b,family = "binomial")
summary(m1.1)
boxplot(residuals(m1.1)~b$tankID)
boxplot(residuals(m1.1)~b$Pop)
# this seems to be better, but we get that strange error message
vif(m1.1) # the inflation in size of the confidence ellipse or ellipsoid for the coefficients of the term in comparison with what would be obtained for orthogonal data.
boxplot(mc/(mc+uc) ~ Treatment*Time, data=c, las=2)
# No random effect of tank
m1 <- glm(cbind(mc,uc)~ Treatment*Time, data=c,family = "binomial")
summary(m1)
boxplot(m1$residuals~c$tankID)
boxplot(m1$residuals~c$Pop)
# definitely some tank effects in the residuals
vif(m1) # variance inflation factor
# hmmm not good
m1.1 <- glmer(cbind(mc,uc)~ Treatment*Time + (1|tankID), data=c,family = "binomial")
summary(m1.1)
boxplot(residuals(m1.1)~c$tankID)
boxplot(residuals(m1.1)~c$Pop)
# this seems to be better, but we get that strange error message
vif(m1.1) # the inflation in size of the confidence ellipse or ellipsoid for the coefficients of the term in comparison with what would be obtained for orthogonal data.
boxplot(mc/(mc+uc) ~ Treatment*Time, data=d, las=2)
# No random effect of tank
m1 <- glm(cbind(mc,uc)~ Treatment*Time, data=d,family = "binomial")
summary(m1)
boxplot(m1$residuals~d$tankID)
boxplot(m1$residuals~d$Pop)
# definitely some tank effects in the residuals
vif(m1) # variance inflation factor
# interesting, much better behaved
m1.1 <- glmer(cbind(mc,uc)~ Treatment*Time + (1|tankID), data=d,family = "binomial")
# note no error message
summary(m1.1)
boxplot(residuals(m1.1)~d$tankID)
boxplot(residuals(m1.1)~d$Pop)
# this seems to be better, but we get that strange error message
vif(m1.1) # the inflation in size of the confidence ellipse or ellipsoid for the coefficients of the term in comparison with what would be obtained for orthogonal data.
# These are default priors I found in some examples. I need to read up on these and
prior1=list(R=list(V=1, nu=0.002), G=list(G1=list(V=1, nu=0.002)))
prior2=list(R=list(V=1, nu=0.002), G=list(G1=list(V=1, nu=1,
alpha.mu=0, alpha.V=100)))
# Real data
m2 <- MCMCglmm(cbind(mc,uc)~ Treatment*Time, random= ~tankID,
data=a,family = "multinomial2", prior=prior1)
plot(cbind(m2$VCV), pch=19, cex=0.2)
par(mfrow=c(4,2), mar=c(2,2,1,0))
plot(m2$Sol, auto.layout=F)
# no autocorrelation in the traces, good!
summary(m2)
# This result is interesting, more conservative P-values than
# what we got with the glmer
# Fake data with 0's for methylation
m2 <- MCMCglmm(cbind(mc,uc)~ Treatment*Time, random= ~tankID,
data=c,family = "multinomial2", prior=prior1)
plot(cbind(m2$VCV), pch=19, cex=0.2)
par(mfrow=c(4,2), mar=c(2,2,1,0))
plot(m2$Sol, auto.layout=F)
# some autocorrelation in the traces, not good!
summary(m2)
# Fake data with 0's for unmenthlated
m2 <- MCMCglmm(cbind(mc,uc)~ Treatment*Time, random= ~tankID,
data=b,family = "multinomial2", prior=prior1)
plot(cbind(m2$VCV), pch=19, cex=0.2)
par(mfrow=c(4,2), mar=c(2,2,1,0))
plot(m2$Sol, auto.layout=F)
# lots of autocorrelation in the traces, not good! Will need to look into convergence issues
summary(m2)
# let's see if we can do better by changing the prior and increasing
# the number of iterations
m2 <- MCMCglmm(cbind(mc,uc)~ Treatment*Time, random= ~tankID,
data=c,family = "multinomial2", prior=prior2,
thin   = 20,
burnin = 3000,
nitt   = 100000)
# further increasing the thinning results in worse density plots;
#
plot(cbind(m2$VCV), pch=19, cex=0.2)
par(mfrow=c(4,2), mar=c(2,2,1,0))
plot(m2$Sol, auto.layout=F)
summary(m2)
# still some autocorrelation, but better than before
# No random effect of tank on real data
m3 <- brm(mc | trials(size)~ Treatment*Time, data=a,family = binomial())
# gives a similar result ot the GLM
plot(marginal_effects(m3))
grid.arrange(plot(marginal_effects(m3.1)))
require(gridExtra)
grid.arrange(plot(marginal_effects(m3.1)))
grid.arrange(plot(marginal_effects(m3)))
# gives a similar result ot the GLM
grid.arrange(plot(marginal_effects(m3)), ncol=3)
m3 <- brm(mc | trials(size)~ Treatment*Time, data=c,family = binomial())
# takes a few seconds
summary(m3)
pairs(m3)
# gives a similar result ot the GLM
plot(marginal_effects(m3))
# Add the random effect of tank
m3.1 <- brm(mc | trials(size)~ Treatment*Time + (1|tankID), data=c,
family = binomial(), iter=5000, control = list(max_treedepth = 15))
summary(m3.1)
plot(m3.1)
plot(marginal_effects(m3.1))
m3.1$data$Treatment["contrasts"]
m3.1$data$Time["contrasts"]
attr(m3.1$data, which = "terms")
["term.labels"]
# (warp_em <- emmeans (m3.1,  ~ Treatment))
# (warp_em <- emmeans (m3.1,  ~ Time))
# (warp_em <- emmeans (m3.1,  ~ Treatment | Time))
#
# cont <- contrast(warp_em, "tukey")
# cont
# (cont_posterior <- gather_emmeans_draws(cont))
# Treatment 400 and Time 09 are the reference levels (Intercept)
hypothesis(m3.1, c(
"Time80 = Treatment2800*2 + Time80 + Treatment2800:Time80", # Main effect of 400 to 2800
"Treatment2800 = Time80*2 + Treatment2800 + Treatment2800:Time80", # Main effect of day 9 to day 80
"Treatment2800:Time80=0", # Is the interaction significant
"Time80 = 0", # Is (Treatment 400 at Time 80) = (Treatment 400 and Time 09)
"Treatment2800 = 0", # Is (Treatment 2800 at Time 09) = (Treatment 400 and Time 09)
"Treatment2800 + Time80 + Treatment2800:Time80 = 0", # (Treatment 2800 at Time 80) = (Treatment 400 and Time 09)"
"Time80 = Treatment2800", # (Treatment 400 at Time 80) = (Treatment 2800 at Time 09)
"Time80 =  Treatment2800 + Time80 + Treatment2800:Time80"  # (Treatment 400 at Time 80) = (Treatment 2800 at Time 80)
#
), class="b", alpha=0.001)
plot(marginal_effects(m3.1))
# get warnings for this data for iter = 2000 and default treedepth
# get no warnings when increasing iter and treedepth
# https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded
pairs(m3.1)
# in this plot want to look for iterations off the 1:1 line
# colored in red or yellow
# https://mc-stan.org/misc/warnings.html
# gives a similar result ot the GLM
plot(marginal_effects(m3)[1])
# gives a similar result ot the GLM
plot(marginal_effects(m3)[1])
# gives a similar result ot the GLM
plot(marginal_effects(m3))[1]
# gives a similar result ot the GLM
plot(marginal_effects(m3)[[1]])
# gives a similar result ot the GLM
str(marginal_effects(m3))
plot(marginal_effects(m3)[[2]])
plot(marginal_effects(m3)$Treatment)
plot(marginal_effects(m3)$Time)
plot(marginal_effects(m3))
levels(c$level)
par(mfrow=c(1,1))
boxplot(mc/size~level, data=c)
get_prior(mc | trials(size)~ level + (1|tankID), data=c,
family = binomial())
m4.1 <- brm(mc | trials(size)~ level + (1|tankID), data=c,
family = binomial(), iter=5000, control = list(max_treedepth = 15, adapt_delta=0.99))
summary(m4.1)
plot(m4.1)
m4.1$data$level["contrasts"]
str(posterior_samples(m4.1))
p<-plot(marginal_effects(m4.1))
round(p$level$data$estimate,3)
round(p$level$data$upper__,3)
round(p$level$data$lower__,3)
marginal_effects(m4.1)
alph = 0.0001/2
hypothesis(m4.1, c(
"level2800_09 + 2*Intercept= 2*Intercept + level2800_80 + level400_80",# Is Day 9 is different from Day 80
"level400_80 + 2*Intercept= 2*Intercept + level2800_80 + level2800_09", # Is 400 different from 2800
"Intercept-(Intercept + level400_80) = (Intercept + level2800_09) - (Intercept + level2800_80)", # Is interaction significant
"Intercept-(Intercept + level2800_09) = (Intercept + level400_80) - (Intercept + level2800_80)", # Is interaction significant
"level2800_80>0" # Is 2800_80 > 400_09
"level2800_80<0", # Is 2800_80 > 400_09
"level2800_09<0",
"level2800_09>0",
"level400_80>0",
"level400_80<0",
"level2800_80=level2800_09",
"level2800_80=level400_80",
"level2800_09=level400_80",
)class="b", alpha=alph)
hypothesis(m4.1, c(
"level2800_09 + 2*Intercept= 2*Intercept + level2800_80 + level400_80",# Is Day 9 is different from Day 80
"level400_80 + 2*Intercept= 2*Intercept + level2800_80 + level2800_09", # Is 400 different from 2800
"Intercept-(Intercept + level400_80) = (Intercept + level2800_09) - (Intercept + level2800_80)", # Is interaction significant
"Intercept-(Intercept + level2800_09) = (Intercept + level400_80) - (Intercept + level2800_80)", # Is interaction significant
"level2800_80>0" # Is 2800_80 > 400_09
"level2800_80<0", # Is 2800_80 > 400_09
"level2800_09<0",
"level2800_09>0",
"level400_80>0",
"level400_80<0",
"level2800_80=level2800_09",
"level2800_80=level400_80",
"level2800_09=level400_80"
)class="b", alpha=alph)
hypothesis(m4.1, c(
"level2800_09 + 2*Intercept= 2*Intercept + level2800_80 + level400_80",# Is Day 9 is different from Day 80
"level400_80 + 2*Intercept= 2*Intercept + level2800_80 + level2800_09", # Is 400 different from 2800
"Intercept-(Intercept + level400_80) = (Intercept + level2800_09) - (Intercept + level2800_80)", # Is interaction significant
"Intercept-(Intercept + level2800_09) = (Intercept + level400_80) - (Intercept + level2800_80)", # Is interaction significant
"level2800_80>0", # Is 2800_80 > 400_09
"level2800_80<0", # Is 2800_80 > 400_09
"level2800_09<0",
"level2800_09>0",
"level400_80>0",
"level400_80<0",
"level2800_80=level2800_09",
"level2800_80=level400_80",
"level2800_09=level400_80"
)class="b", alpha=alph)
hypothesis(m4.1, c(
"level2800_09 + 2*Intercept= 2*Intercept + level2800_80 + level400_80",# Is Day 9 is different from Day 80
"level400_80 + 2*Intercept= 2*Intercept + level2800_80 + level2800_09", # Is 400 different from 2800
"Intercept-(Intercept + level400_80) = (Intercept + level2800_09) - (Intercept + level2800_80)", # Is interaction significant
"Intercept-(Intercept + level2800_09) = (Intercept + level400_80) - (Intercept + level2800_80)", # Is interaction significant
"level2800_80>0", # Is 2800_80 > 400_09
"level2800_80<0", # Is 2800_80 > 400_09
"level2800_09<0",
"level2800_09>0",
"level400_80>0",
"level400_80<0",
"level2800_80=level2800_09",
"level2800_80=level400_80",
"level2800_09=level400_80"
), class="b", alpha=alph)
hypothesis(m4.1, c(
"level2800_09 + 2*Intercept= 2*Intercept + level2800_80 + level400_80",# Is Day 9 is different from Day 80
"level400_80 + 2*Intercept= 2*Intercept + level2800_80 + level2800_09", # Is 400 different from 2800
"Intercept-(Intercept + level400_80) = (Intercept + level2800_09) - (Intercept + level2800_80)", # Is interaction significant
"Intercept-(Intercept + level2800_09) = (Intercept + level400_80) - (Intercept + level2800_80)", # Is interaction significant
"level2800_80>0", # Is 2800_80 > 400_09
"level2800_80<0", # Is 2800_80 > 400_09
"level2800_09<0",
"level2800_09>0",
"level400_80>0",
"level400_80<0",
"level2800_80=level2800_09",
"level2800_80=level400_80",
"level2800_09=level400_80"
), class="b", alpha=alph)
